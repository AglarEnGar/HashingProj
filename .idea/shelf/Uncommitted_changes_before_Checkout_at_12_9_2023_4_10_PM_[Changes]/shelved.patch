Index: main.cpp
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\r\n#include <string>\r\n#include <fstream>\r\n\r\n#include \"Cart.h\"\r\n#include \"Inventory.h\"\r\n#include \"store.h\"\r\n\r\n#define DEFAULT_INVENTORY \"inventory_list.csv\"\r\n#define DEFAULT_OUTPUT_FILE \"inventory_update.csv\"\r\n\r\nusing namespace std;\r\n\r\nint main() {\r\n\r\n    store prompter;\r\n    auto *car = new Cart;\r\n    auto *inv= prompter.loadFileintoInv(DEFAULT_INVENTORY);\r\n\r\n    prompter.promptTasksCus(inv, car);\r\n\r\n    return 0;\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/main.cpp b/main.cpp
--- a/main.cpp	(revision 441124601bd1e6791c261aa8a68c0c437c3302de)
+++ b/main.cpp	(date 1701856409664)
@@ -16,7 +16,6 @@
     store prompter;
     auto *car = new Cart;
     auto *inv= prompter.loadFileintoInv(DEFAULT_INVENTORY);
-
     prompter.promptTasksCus(inv, car);
 
     return 0;
Index: store.h
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>//\r\n// Created by lucaj on 12/5/2023.\r\n//\r\n\r\n#ifndef HASHING_STORE_H\r\n#define HASHING_STORE_H\r\n#include \"Inventory.h\"\r\n#include \"Cart.h\"\r\n\r\nclass store {\r\nprivate:\r\n    std::string mainInvFile = \"inventory_list.csv\";\r\n    std::string mainOutFile = \"inventory_update.csv\";\r\n    int max_menu_option = 10;\r\n    int max_inventory_file = 5;\r\npublic:\r\n    store();\r\n    ~store();\r\n    int menuOptionsAdm();\r\n    int menuOptionsCus();\r\n    void promptTasksCus(Inventory * inv, Cart * maincart1);\r\n    void promptTasksAdm(Inventory * inv, Cart * maincart1);\r\n    Inventory * loadFileintoInv(std::string file);\r\n    void loadItemsFromInv(Product c1);\r\n    void outputCartintoFile(std::string ofile);\r\n    void outputInvintoFile(std::string oofile);\r\n    void insertionSortCart();\r\n    void mergeSortCart();\r\n    void quicksortCart();\r\n};\r\n\r\n\r\n#endif //HASHING_STORE_H\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/store.h b/store.h
--- a/store.h	(revision 441124601bd1e6791c261aa8a68c0c437c3302de)
+++ b/store.h	(date 1702012194489)
@@ -21,7 +21,6 @@
     void promptTasksCus(Inventory * inv, Cart * maincart1);
     void promptTasksAdm(Inventory * inv, Cart * maincart1);
     Inventory * loadFileintoInv(std::string file);
-    void loadItemsFromInv(Product c1);
     void outputCartintoFile(std::string ofile);
     void outputInvintoFile(std::string oofile);
     void insertionSortCart();
Index: store.cpp
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>//\r\n// Created by lucaj on 12/5/2023.\r\n//\r\n#include \"store.h\"\r\n\r\n#include <regex>\r\n#include <fstream>\r\n\r\n\r\n\r\nstore::store() = default;\r\nstore::~store() = default;\r\n\r\nenum ActionsAdmin {QUITI, TOTAL_ITEM_COUNT_INV, ITEM_COUNT_INV, PRINT_TO_SCREEN_INV, REMOVE_PRODUCT_INV, ADD_PRODUCT_INV, LOAD_INV_FILE, PRINT_INV_FILE, SWITCH_TO_CUST};\r\n\r\nenum ActionsCustomer {QUITC, TOTAL_ITEM_COUNT_CART, ITEM_COUNT_CART, CARTITEM_BACK_TO_INV, ADD_CARTITEM_FROM_INV, PRINT_CART, CHECKOUT, SELECTION_SORT_CART, NEW_CART, MERGE_CARTS,\r\n    LOAD_NEW_CART, WRITE_CART_TO_FILE, SWITCH_TO_ADMIN};\r\n\r\n\r\nint store::menuOptionsAdm()\r\n{\r\n    int choice = 0;\r\n\r\n    while(true) {\r\n        std::cout << \"--------------------------------------------\" << std::endl;\r\n        std::cout << \"Options menu: \" << std::endl;\r\n        std::cout << \"  (\" << TOTAL_ITEM_COUNT_INV << \") Count - get number of Products in Inventory\\n\";\r\n        std::cout << \"  (\" << ITEM_COUNT_INV << \") - get the number of a certain Product in Inventory\\n\";\r\n        std::cout << \"  (\" << PRINT_TO_SCREEN_INV << \") Print the full list of items in Inventory\\n\";\r\n        std::cout << \"  (\" << REMOVE_PRODUCT_INV << \") Find a product, and if found, remove that product from inventory\\n\";\r\n        std::cout << \"  (\" << ADD_PRODUCT_INV << \") Add a product to Inventory\\n\";\r\n        std::cout << \"  (\" << LOAD_INV_FILE << \") Load a new cvs file for Inventory\\n\";\r\n        std::cout << \"  (\" << PRINT_INV_FILE << \") Print the currently managed Inventory to console\\n\";\r\n        std::cout << \"  (\" << SWITCH_TO_CUST << \") Switch to the customer menu\\n\";\r\n        std::cout << \"Enter a number from \" << 1 << \" to \" << SWITCH_TO_CUST << \", or \" << QUITI << \" to exit: \"\r\n                  << std::endl;\r\n\r\n        std::cin >> choice;\r\n\r\n        if (choice < QUITC || choice > SWITCH_TO_CUST) {\r\n            std::cout << \"Error! Input must be a number between \" << 1 << \" and \" << SWITCH_TO_CUST << \", or \" << QUITC << \" to exit.\" << std::endl;\r\n        } else if (choice == QUITC) {\r\n            return QUITC;\r\n        } else {\r\n            return choice;\r\n        }\r\n    }\r\n}\r\nint store::menuOptionsCus()\r\n{\r\n    int choice = 0;\r\n\r\n    while(true)\r\n    {\r\n        std::cout << \"--------------------------------------------\" << std::endl;\r\n        std::cout << \"Options menu: \" << std::endl;\r\n        std::cout << \"  (\" << TOTAL_ITEM_COUNT_CART << \") Get the total number of items in your cart\\n\";\r\n        std::cout << \"  (\" << ITEM_COUNT_CART << \") Get the number of a particular item in your cart\\n\";\r\n        std::cout << \"  (\" << CARTITEM_BACK_TO_INV << \") Remove an Item from your cart\\n\";\r\n        std::cout << \"  (\" << ADD_CARTITEM_FROM_INV << \") Add an Item to your cart from Inventory\\n\";\r\n        std::cout << \"  (\" << PRINT_CART << \") View your cart's Items\\n\";\r\n        std::cout << \"  (\" << CHECKOUT << \") Calculate the total price of all the products in your cart\\n\";\r\n        std::cout << \"  (\" << SELECTION_SORT_CART << \") Sort your cart with the selection sort algorithm (You only sort the names)\\n\";\r\n        std::cout << \"  (\" << NEW_CART << \") Save your current cart to a file, start in a new empty cart\\n\";\r\n        std::cout << \"  (\" << MERGE_CARTS << \") If you have multiple Carts, you can merge them into one cart.\\n\";\r\n        std::cout << \"  (\" << LOAD_NEW_CART << \") Loads a new cart from an inputted file name.\\n\";\r\n        std::cout << \"  (\" << WRITE_CART_TO_FILE << \") Saves your current cart to a file.\\n\";\r\n        std::cout << \"  (\" << SWITCH_TO_ADMIN << \") Switch to admin menu.\\n\";\r\n        std::cout << \"Enter a number from \" << 1 << \" to \" << SWITCH_TO_ADMIN << \", or \" << QUITC << \" to exit: \" << std::endl;\r\n\r\n        std::cin >> choice;\r\n\r\n        if(choice < QUITC || choice > SWITCH_TO_ADMIN)\r\n        {\r\n            std::cout << \"Error! Input must be a number between \" << 1 << \" and \" << SWITCH_TO_ADMIN << \", or \" << QUITC << \" to exit.\" << std::endl;\r\n        } else if(choice == QUITC)\r\n        {\r\n            return QUITC;\r\n        }\r\n        else\r\n        {\r\n            return choice;\r\n        }\r\n    }\r\n}\r\nProduct * findingPrompts(int option, Inventory * inven, Cart * car);\r\ndouble checkout(Cart * croom);\r\nvoid addProducttoCart(Product *p, Inventory* ini, Cart * cars);\r\nvoid removeProductCart(std::string nem1, Inventory* in1, Cart * car1);\r\nvoid store::promptTasksCus(Inventory * inv, Cart * maincart1)\r\n{\r\n    int choice = 0;\r\n    while(true)\r\n    {\r\n        choice = menuOptionsCus();\r\n        switch (choice)\r\n        {\r\n            case TOTAL_ITEM_COUNT_CART:\r\n                std::cout << \"There are \" << maincart1->size() << \" items in your shopping cart.\" << std::endl;\r\n                break;\r\n            case ITEM_COUNT_CART:\r\n                std::cout << \"Coming soon! \" << std::endl;\r\n                break;\r\n            case CARTITEM_BACK_TO_INV:\r\n                findingPrompts(4, inv, maincart1);\r\n                break;\r\n            case ADD_CARTITEM_FROM_INV:\r\n                findingPrompts(3, inv, maincart1);\r\n                break;\r\n            case PRINT_CART:\r\n                std::cout << \"----------------------------------SHOPPING CART----------------------------------\" << std::endl;\r\n                maincart1->printForward();\r\n                break;\r\n            case CHECKOUT:\r\n                std::cout << \"Your total is $\";\r\n                printf(\"%.2f\", checkout(maincart1));\r\n                std::cout << std::endl << \"We accept Visa, Venmo and Mastercard.\\n\";\r\n                break;\r\n            case SELECTION_SORT_CART:\r\n                std::cout << \"Coming soon! \" << std::endl;\r\n                break;\r\n            case NEW_CART:\r\n                std::cout << \"Coming soon! \" << std::endl;\r\n                break;\r\n            case MERGE_CARTS:\r\n                std::cout << \"Coming soon! \" << std::endl;\r\n                break;\r\n            case LOAD_NEW_CART:\r\n                std::cout << \"Coming soon! \" << std::endl;\r\n                break;\r\n            case WRITE_CART_TO_FILE:\r\n                std::cout << \"Coming soon! \" << std::endl;\r\n                break;\r\n            case SWITCH_TO_ADMIN:\r\n                promptTasksAdm(inv, maincart1);\r\n                return;\r\n            default:\r\n                std::cout << \"Thank you! Bye!\" << std::endl;\r\n                delete inv;\r\n                return;\r\n        }\r\n    }\r\n\r\n}\r\nvoid store::promptTasksAdm(Inventory * inv, Cart * maincart2)\r\n{\r\n    int choice = 0;\r\n    std::string input;\r\n    while(true)\r\n    {\r\n        choice = menuOptionsAdm();\r\n        switch (choice)\r\n        {\r\n            case TOTAL_ITEM_COUNT_INV:\r\n                std::cout << \"There are \" << inv->size() << \"items in the inventory.\" << std::endl;\r\n                break;\r\n            case ITEM_COUNT_INV:\r\n                findingPrompts(1, inv, maincart2);\r\n                break;\r\n            case PRINT_TO_SCREEN_INV:\r\n                inv->printall();\r\n                break;\r\n            case REMOVE_PRODUCT_INV:\r\n                std::cout << \"Coming soon! \" << std::endl;\r\n                break;\r\n            case ADD_PRODUCT_INV:\r\n                std::cout << \"Coming soon! \" << std::endl;\r\n                break;\r\n            case LOAD_INV_FILE:\r\n                std::cout << \"Coming soon! \" << std::endl;\r\n                break;\r\n            case PRINT_INV_FILE:\r\n                std::cout << \"Coming soon! \" << std::endl;\r\n                break;\r\n            case SWITCH_TO_CUST:\r\n                promptTasksCus(inv, maincart2);\r\n                return;\r\n            default:\r\n                std::cout << \"Thank you! Bye!\" << std::endl;\r\n                delete inv;\r\n                return;\r\n        }\r\n    }\r\n}\r\nCartItem * findIteminCart(Cart * c, std::string nam)\r\n{\r\n    CartItem* current = c->getHead();\r\n    while (current != nullptr)\r\n    {\r\n        CartItem *next = current->getNext();\r\n        if((*current).getItem().getProductName() == nam)\r\n        {\r\n            return current;\r\n        }\r\n        current = next;\r\n    }\r\n    return nullptr;\r\n}\r\nvoid addProducttoCart(Product *p, Inventory* ini, Cart * cars)\r\n{\r\n    std::cout << \"entered function\\n\";\r\n    auto *c1 = new CartItem;\r\n    c1->setItem(*p);\r\n    std::cout << \"item successfully made\\n\";\r\n    ini->delFromName(p->getProductName());\r\n    std::cout << \"inventory product deleted\\n\";\r\n    cars->push_back(c1);\r\n}\r\ndouble checkout(Cart * croom)\r\n{\r\n    double cost = 0.0;\r\n    for(CartItem * it = croom->getHead(); it != croom->getTail(); it = it->getNext())\r\n    {\r\n        cost += it->getItem().getProductPrice();\r\n    }\r\n    return cost;\r\n}\r\nvoid removeProductCart(std::string nem1, Inventory* in1, Cart * car1)\r\n{\r\n    CartItem * c1 = findIteminCart(car1, nem1);\r\n    Product p1 = c1->getItem();\r\n    in1->insert(p1);\r\n    car1->removeItem(c1);\r\n}\r\nProduct * findingPrompts(int option, Inventory * inven, Cart * car)\r\n{\r\n    Product * p;\r\n    std::string in;\r\n    std::cout << \"What item do you want to find \";\r\n    bool b = true;\r\n\r\n    switch(option)\r\n    {\r\n        case 1:\r\n            std::cout << \"to count?\" << std::endl;\r\n            std::getline(std::cin, in);\r\n            std::getline(std::cin, in);\r\n            std::cout << \"Your word was '\" << in << \"'.\" << std::endl;\r\n            p = inven->getFromName(in);\r\n            if(!p->getProductName().empty())\r\n            {\r\n                std::cout << \"There are \" << inven->itemQuantity(in) << \" units of that item.\" << std::endl;\r\n            }\r\n            return p;\r\n        case 2:\r\n            std::cout << \"to remove?\" << std::endl;\r\n            std::getline(std::cin, in);\r\n            std::getline(std::cin, in);\r\n            std::cout << \"Your word was '\" << in << \"'.\" << std::endl;\r\n            p = inven->getFromName(in);\r\n            if(!p->getProductName().empty())\r\n            {\r\n                inven->delFromName(in);\r\n                std::cout << \"Product removed\\n\";\r\n            }\r\n            return p;\r\n        case 3:\r\n            std::cout <<\"to add to your cart?\\n\";\r\n            while(b) {\r\n                std::cout << \"----------------------------------STORE INVENTORY----------------------------------\" << std::endl;\r\n                inven->printall();\r\n                std::cout << \"\\nPlease type the name of the item you wish to add.\" << std::endl;\r\n\r\n                //You need to do this for some reason because it ignores the getline on the first pass\r\n                std::getline(std::cin, in);\r\n                std::getline(std::cin, in);\r\n\r\n                p = inven->getFromName(in);\r\n                if(p != nullptr)\r\n                {\r\n                    addProducttoCart(p, inven, car);\r\n                    std::cout << \"\\\"\" << in << \"\\\"\" << \" Added!\" << std::endl;\r\n\r\n                    std::cout << \"Add another item? y/n\\n\";\r\n                    in = \"\";\r\n                    while( in.empty() && std::cin >> in )\r\n                    {\r\n                        if (in == \"y\")\r\n                        {\r\n                            b = true;\r\n                        }\r\n                        else if(in == \"n\")\r\n                        {\r\n                            b = false;\r\n                        }\r\n                        else {\r\n                            std::cout << \"Error, invalid command. please type \\\"y\\\" or \\\"n\\\". \\n\";\r\n                            in = \"\";\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            return nullptr;\r\n        case 4:\r\n            std::cout <<\"to remove from your cart?\\n\";\r\n            while(b) {\r\n                std::cout << \"----------------------------------SHOPPING CART----------------------------------\" << std::endl;\r\n                car->printForward();\r\n                std::cout << \"\\nPlease type the name of the item you wish to remove.\\n\";\r\n\r\n                std::getline(std::cin, in);\r\n                std::getline(std::cin, in);\r\n\r\n                if(findIteminCart(car, in) != nullptr)\r\n                {\r\n                    removeProductCart(in, inven, car);\r\n                    std::cout << \"\\\"\" << in << \"\\\"\" << \" Removed!\" << std::endl;\r\n                    if(car->size() != 0)\r\n                    {\r\n                        std::cout << \"Remove another item? y/n\\n\";\r\n                        in = \"\";\r\n                        while( in.empty() && std::cin >> in )\r\n                        {\r\n                            if (in == \"y\")\r\n                            {\r\n                                b = true;\r\n                            }\r\n                            else if(in == \"n\")\r\n                            {\r\n                                b = false;\r\n                            }\r\n                            else {\r\n                                std::cout << \"Error, invalid command. please type \\\"y\\\" or \\\"n\\\". \\n\";\r\n                                in = \"\";\r\n                            }\r\n                        }\r\n                    }\r\n                    else {\r\n                        std::cout << \"Cart is now empty!\" << std::endl;\r\n                        return nullptr;\r\n                    }\r\n                } else {\r\n                    std::cout << \"Could not find that item in your cart!\\n\";\r\n                }\r\n            }\r\n\r\n        default:\r\n            return nullptr;\r\n    }\r\n\r\n}\r\n\r\nconst std::regex comma(\",\");\r\nInventory * store::loadFileintoInv(std::string file)\r\n{\r\n    auto * p = new Product;\r\n    auto * inv = new Inventory;\r\n    std::string line = \"\";\r\n    std::ifstream input_file;\r\n    input_file.open(file);\r\n\r\n\r\n    if(!input_file.is_open())\r\n    {\r\n        std::cout << \"ERROR! Cannot read chosen file \" << file << \". File \\\"\" << 1 << \"\\\" remains open.\" << std::endl;\r\n        return loadFileintoInv(mainInvFile);\r\n    }\r\n\r\n    while(input_file && getline(input_file, line))\r\n    {\r\n        std::vector<std::string> row { std::sregex_token_iterator(line.begin(),line.end(),comma,-1), std::sregex_token_iterator() };\r\n        p->setProductId(stoi(row.at(0)));\r\n        p->setProductName(row.at(1));\r\n        p->setProductPrice(std::stod(row.at(2)));\r\n        p->setDescription(row.at(3));\r\n        inv->insert(*p);\r\n    }\r\n    return inv;\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/store.cpp b/store.cpp
--- a/store.cpp	(revision 441124601bd1e6791c261aa8a68c0c437c3302de)
+++ b/store.cpp	(date 1702012194496)
@@ -366,4 +366,5 @@
         inv->insert(*p);
     }
     return inv;
-}
\ No newline at end of file
+}
+
